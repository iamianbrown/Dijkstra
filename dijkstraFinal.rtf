{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red253\green143\blue63;\red252\green106\blue93;\red252\green95\blue163;\red208\green168\blue255;\red65\green161\blue192;
\red208\green168\blue255;\red93\green216\blue255;\red103\green183\blue164;\red208\green191\blue105;\red158\green241\blue221;
\red161\green103\blue230;\red103\green183\blue164;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c25490\c63137\c75294;
\csgenericrgb\c81569\c65882\c100000;\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c61961\c94510\c86667;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c40392\c71765\c64314;\csgenericrgb\c63232\c40219\c90115;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 /*\cf4 \cb3 \
\cf2 \cb3     Dijkstra's Algorithm\cf4 \cb3 \
\cf2 \cb3     Ian Brown\cf4 \cb3 \
\cf2 \cb3     August 9 2020\cf4 \cb3 \
\cf2 \cb3     Copyright \'a9 2020 Ian Brown. All rights reserved.\cf4 \cb3 \
\cf2 \cb3  */\cf4 \cb3 \
\cf5 \cb3 #include \cf6 <iostream>\cf4 \cb3 \
\cf5 \cb3 #include \cf6 <random>\cf4 \cb3 \
\cf5 \cb3 #include \cf6 <vector>\cf4 \cb3 \
\cf5 \cb3 #include \cf6 <algorithm>\cf4 \cb3 \
\cf5 \cb3 #include \cf6 <list>\cf4 \cb3 \

\f1\b \cf7 \cb3 using
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 namespace
\f0\b0 \cf4 \cb3  \cf8 \cb3 std\cf4 \cb3 ;\
\cf2 \cb3 //returns a random value between 0 and 1\cf4 \cb3 \

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 prob\cf4 \cb3 ();\
\cf2 \cb3 //returns a random value between 1.0 and 10.0\cf4 \cb3 \

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 randWeight\cf4 \cb3 ();\
\cf2 \cb3 //returns true if a vector vec contains an element elem\cf4 \cb3 \

\f1\b \cf7 \cb3 template
\f0\b0 \cf4 \cb3  <
\f1\b \cf7 \cb3 class
\f0\b0 \cf4 \cb3  T>\

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 vecContains\cf4 \cb3 (\cf10 \cb3 vector\cf4 \cb3 <T> vec, T elem);\
\

\f1\b \cf7 \cb3 class
\f0\b0 \cf4 \cb3  \cf11 \cb3 Node\cf4 \cb3 \{\

\f1\b \cf7 \cb3 public
\f0\b0 \cf4 \cb3 :\
    \cf2 \cb3 //constructor assigning node its index and distToThis values. -1 distToThis is a placeholder value\cf4 \cb3 \
    
\f1\b \cf7 \cb3 explicit
\f0\b0 \cf4 \cb3  \cf9 \cb3 Node\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i):\cf12 \cb3 index\cf4 \cb3 (i), \cf12 \cb3 distToThis\cf4 \cb3 (-\cf13 \cb3 1\cf4 \cb3 )\{\}\
    \cf2 \cb3 //add an edge to this node\cf4 \cb3 \
    
\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf9 \cb3 addEdge\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * node)\{\cf12 \cb3 adjacent\cf4 \cb3 .\cf15 \cb3 push_back\cf4 \cb3 (node);\};\
    \cf2 \cb3 //return all nodes connected to this one by an edge\cf4 \cb3 \
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 getAdjacent\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 adjacent\cf4 \cb3 ;\}\
    \cf2 \cb3 //return index\cf4 \cb3 \
    
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  \cf9 \cb3 getIndex\cf4 \cb3 () 
\f1\b \cf7 \cb3 const
\f0\b0 \cf4 \cb3 \{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 index\cf4 \cb3 ;\}\
    \cf2 \cb3 //return the path to this node (used in Graph::dijkstra only)\cf4 \cb3 \
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 getPathTo\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 pathToThis\cf4 \cb3 ;\}\
    \cf2 \cb3 //clear the pathToThis variable, and input a new path list\cf4 \cb3 \
    
\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf9 \cb3 setPathTo\cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> path);\
    \cf2 \cb3 //return distToThis\cf4 \cb3 \
    
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 getDist\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 distToThis\cf4 \cb3 ;\}\
    \cf2 \cb3 //set distToThis to an input value (dist)\cf4 \cb3 \
    
\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf9 \cb3 setDist\cf4 \cb3 (
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  dist)\{\cf12 \cb3 distToThis\cf4 \cb3  = dist;\}\
    \cf2 \cb3 //add a node onto this nodes existing pathToThis variable\cf4 \cb3 \
    
\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf9 \cb3 addToPath\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * node);\

\f1\b \cf7 \cb3 private
\f0\b0 \cf4 \cb3 :\
    
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  \cf9 \cb3 index\cf4 \cb3 ; \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 adjacent\cf4 \cb3 ; \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 pathToThis\cf4 \cb3 ; 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 distToThis\cf4 \cb3 ;\
\};\
\cf2 \cb3 //returns true if a::distTo < b::distTo, otherwise returns false\cf4 \cb3 \

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 compareDist\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b);\
\cf2 \cb3 //converts a list into a vector\cf4 \cb3 \
\cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 listToVec\cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> lst);\
\cf2 \cb3 //checks if a list of Node pointers, lst, contains a specific Node pointer, elem\cf4 \cb3 \

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 listContains\cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> lst, \cf14 \cb3 Node\cf4 \cb3 * elem);\
\cf2 \cb3 //overloads << to print out a list of nodes\cf4 \cb3 \
\cf8 \cb3 ostream\cf4 \cb3 & 
\f1\b \cf7 \cb3 operator
\f0\b0 \cf4 \cb3 << (\cf8 \cb3 ostream\cf4 \cb3 & out, \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> nodes);\
\cf2 \cb3 //overloads << to print out an individual node\cf4 \cb3 \
\cf8 \cb3 ostream\cf4 \cb3 & 
\f1\b \cf7 \cb3 operator
\f0\b0 \cf4 \cb3 << (\cf8 \cb3 ostream\cf4 \cb3 & out, \cf14 \cb3 Node\cf4 \cb3 * n);\
\

\f1\b \cf7 \cb3 class
\f0\b0 \cf4 \cb3  \cf11 \cb3 Edge\cf4 \cb3 \{\

\f1\b \cf7 \cb3 public
\f0\b0 \cf4 \cb3 :\
    \cf2 \cb3 //constructor\cf4 \cb3 \
    
\f1\b \cf7 \cb3 explicit
\f0\b0 \cf4 \cb3  \cf9 \cb3 Edge\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3  *a = 
\f1\b \cf7 \cb3 nullptr
\f0\b0 \cf4 \cb3 , \cf14 \cb3 Node\cf4 \cb3 * b = 
\f1\b \cf7 \cb3 nullptr
\f0\b0 \cf4 \cb3 , 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  wt = \cf13 \cb3 0\cf4 \cb3 );\
    \cf2 \cb3 //return the edge's weight, wt\cf4 \cb3 \
    
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 getWeight\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 wt\cf4 \cb3 ;\}\
    \cf2 \cb3 //return a pointer to the first Node the edge is connected to, node1\cf4 \cb3 \
    \cf14 \cb3 Node\cf4 \cb3 * \cf9 \cb3 getNode1\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 node1\cf4 \cb3 ;\}\
    \cf2 \cb3 //return a pointer to the second Node the edge is connected to, node2\cf4 \cb3 \
    \cf14 \cb3 Node\cf4 \cb3 * \cf9 \cb3 getNode2\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 node2\cf4 \cb3 ;\}\

\f1\b \cf7 \cb3 private
\f0\b0 \cf4 \cb3 :\
    
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 wt\cf4 \cb3 ; \cf14 \cb3 Node\cf4 \cb3 * \cf9 \cb3 node1\cf4 \cb3 ; \cf14 \cb3 Node\cf4 \cb3 * \cf9 \cb3 node2\cf4 \cb3 ;\
\};\
\

\f1\b \cf7 \cb3 class
\f0\b0 \cf4 \cb3  \cf11 \cb3 Graph\cf4 \cb3 \{\

\f1\b \cf7 \cb3 public
\f0\b0 \cf4 \cb3 :\
    \cf2 \cb3 //constructor, creates n new Nodes\cf4 \cb3 \
    
\f1\b \cf7 \cb3 explicit
\f0\b0 \cf4 \cb3  \cf9 \cb3 Graph\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  n = \cf13 \cb3 1\cf4 \cb3 );\
    \cf2 \cb3 //destructor\cf4 \cb3 \
    ~\cf9 \cb3 Graph\cf4 \cb3 ();\
    \cf2 \cb3 //adds an Edge between the Nodes at a and at b, with weight wt\cf4 \cb3 \
    
\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf9 \cb3 addEdge\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  wt);\
    \cf2 \cb3 //adds an Edge with weight wt between the Nodes with index a and index b\cf4 \cb3 \
    
\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf9 \cb3 addEdge\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  a, 
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  b, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  wt);\
    \cf2 \cb3 //returns the number of Nodes in the graph\cf4 \cb3 \
    
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  \cf9 \cb3 getSize\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 static_cast
\f0\b0 \cf4 \cb3 <
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3 >(\cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 size\cf4 \cb3 ());\}\
    \cf2 \cb3 //returns the weight of the edge connecting the nodes at a and at b. If no Edge connects the nodes at a and at b, returns NULL\cf4 \cb3 \
    
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 getEdgeWeight\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b);\
    \cf2 \cb3 //returns a pointer to an edge connecting a and b. returns nullptr if no edge connects the nodes at a and at b\cf4 \cb3 \
    \cf14 \cb3 Edge\cf4 \cb3 * \cf9 \cb3 getEdgePointer\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b);\
    \cf2 \cb3 //returns a vector of pointers to every Node in the Graph\cf4 \cb3 \
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 getNodes\cf4 \cb3 ()\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf12 \cb3 nodes\cf4 \cb3 ;\}\
    \cf2 \cb3 //returns true if there exists a path between the Node at a and the Node at b\cf4 \cb3 \
    
\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 nodesConnected\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b);\
    \cf2 \cb3 //returns the shortest path between the Nodes at a and at b. If no such path exists, returns an empty list\cf4 \cb3 \
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 dijkstra\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b);\

\f1\b \cf7 \cb3 private
\f0\b0 \cf4 \cb3 :\
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 nodes\cf4 \cb3 ; \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Edge\cf4 \cb3 *> \cf9 \cb3 edges\cf4 \cb3 ;\
\};\
\cf2 \cb3 //generates a random Graph with a chosen density and n vertices, then returns a pointer to it\cf4 \cb3 \
\cf14 \cb3 Graph\cf4 \cb3 * \cf9 \cb3 randGraph\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  n, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  density);\
\cf2 \cb3 //overloads << to print out a Graph stored at g\cf4 \cb3 \
\cf8 \cb3 ostream\cf4 \cb3 & 
\f1\b \cf7 \cb3 operator
\f0\b0 \cf4 \cb3 <<(\cf8 \cb3 ostream\cf4 \cb3 & out, \cf14 \cb3 Graph\cf4 \cb3 * g);\
\cf2 \cb3 //computes the graph's average path length\cf4 \cb3 \

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 avgPath\cf4 \cb3 (\cf14 \cb3 Graph\cf4 \cb3 * g);\
\

\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  \cf9 \cb3 main\cf4 \cb3 () \{\
    \cf15 \cb3 srand\cf4 \cb3 (
\f1\b \cf7 \cb3 static_cast
\f0\b0 \cf4 \cb3 <
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3 >(\cf15 \cb3 time\cf4 \cb3 (\cf13 \cb3 0\cf4 \cb3 )));\
    \cf14 \cb3 Graph\cf4 \cb3 * graph1 = \cf16 \cb3 randGraph\cf4 \cb3 (\cf13 \cb3 50\cf4 \cb3 , \cf13 \cb3 0.2\cf4 \cb3 );\
    \cf17 \cb3 cout\cf4 \cb3  << \cf6 \cb3 "The average path length of a graph with 50 nodes and a density of 0.2 is: "\cf4 \cb3  << \cf15 \cb3 endl\cf4 \cb3  << \cf16 \cb3 avgPath\cf4 \cb3 (graph1) << \cf6 \cb3 " Nodes"\cf4 \cb3  << \cf15 \cb3 endl\cf4 \cb3 ;\
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> nodes = graph1->\cf16 \cb3 dijkstra\cf4 \cb3 (graph1->\cf16 \cb3 getNodes\cf4 \cb3 ().\cf15 \cb3 at\cf4 \cb3 (\cf13 \cb3 0\cf4 \cb3 ), graph1->\cf16 \cb3 getNodes\cf4 \cb3 ().\cf15 \cb3 at\cf4 \cb3 (\cf13 \cb3 49\cf4 \cb3 ));\
    \cf17 \cb3 cout\cf4 \cb3  << nodes << \cf15 \cb3 endl\cf4 \cb3 ;\
    \cf14 \cb3 Graph\cf4 \cb3 * graph2 = \cf16 \cb3 randGraph\cf4 \cb3 (\cf13 \cb3 50\cf4 \cb3 , \cf13 \cb3 0.4\cf4 \cb3 );\
    \cf17 \cb3 cout\cf4 \cb3  << \cf6 \cb3 "The average path length of a graph with 50 nodes and a density of 0.4 is: "\cf4 \cb3  << \cf15 \cb3 endl\cf4 \cb3  << \cf16 \cb3 avgPath\cf4 \cb3 (graph2) << \cf6 \cb3 " Nodes"\cf4 \cb3  << \cf15 \cb3 endl\cf4 \cb3 ;\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  \cf13 \cb3 0\cf4 \cb3 ;\
\}\
\cf2 \cb3 //-----------------------------------------------------------------------------------------------------------------------\cf4 \cb3 \
\cf14 \cb3 Graph\cf4 \cb3 * \cf9 \cb3 randGraph\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  n, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  density)\{\
    \cf14 \cb3 Graph\cf4 \cb3 * g = 
\f1\b \cf7 \cb3 new
\f0\b0 \cf4 \cb3  \cf14 \cb3 Graph\cf4 \cb3 (n);\
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> nodes = g->\cf16 \cb3 getNodes\cf4 \cb3 ();\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i = \cf13 \cb3 0\cf4 \cb3 ; i < n; i++)\{\
        
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  j = \cf13 \cb3 0\cf4 \cb3 ; j < i; j++)\{\
            
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (\cf16 \cb3 prob\cf4 \cb3 () < density)\{\
                g->\cf16 \cb3 addEdge\cf4 \cb3 (nodes.\cf15 \cb3 at\cf4 \cb3 (i),nodes.\cf15 \cb3 at\cf4 \cb3 (j), \cf16 \cb3 randWeight\cf4 \cb3 ());\
            \}\
        \}\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  g;\
\}\
\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 dijkstra\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b)\{\
    \cf14 \cb3 Node\cf4 \cb3 * temp; \cf14 \cb3 Node\cf4 \cb3 * previous = a; 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  distToPrevious = \cf13 \cb3 0\cf4 \cb3 , edgeWeight;\
    a->\cf16 \cb3 setDist\cf4 \cb3 (\cf13 \cb3 0\cf4 \cb3 );\
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> open, closed, adj;\
    
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (!\cf16 \cb3 nodesConnected\cf4 \cb3 (a, b)) 
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  closed;\
    a->\cf16 \cb3 setDist\cf4 \cb3 (\cf13 \cb3 0\cf4 \cb3 );\
    closed.\cf15 \cb3 push_back\cf4 \cb3 (a);\
    previous = a;\
    
\f1\b \cf7 \cb3 while
\f0\b0 \cf4 \cb3 (!\cf16 \cb3 listContains\cf4 \cb3 (closed, b))\{\
        adj = previous->\cf16 \cb3 getAdjacent\cf4 \cb3 ();\
        
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *>::\cf8 \cb3 iterator\cf4 \cb3  node = adj.\cf15 \cb3 begin\cf4 \cb3 (); node != adj.\cf15 \cb3 end\cf4 \cb3 (); node++)\{\
            
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (!\cf16 \cb3 listContains\cf4 \cb3 (closed, *node))\{\
                \cf2 \cb3 //update open set (priority queue) by adding all adjacent nodes and sorting\cf4 \cb3 \
                
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (!\cf16 \cb3 listContains\cf4 \cb3 (open, *node))\
                    open.\cf15 \cb3 push_back\cf4 \cb3 (*node);\
                edgeWeight = \cf16 \cb3 getEdgeWeight\cf4 \cb3 (*node, previous);\
                \cf2 \cb3 //if path thru current node is shorter than old path, update\cf4 \cb3 \
                
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 ((*node)->\cf16 \cb3 getDist\cf4 \cb3 () == -\cf13 \cb3 1\cf4 \cb3  || (*node)->\cf16 \cb3 getDist\cf4 \cb3 () > distToPrevious + edgeWeight)\{\
                    (*node)->\cf16 \cb3 setPathTo\cf4 \cb3 (previous->\cf16 \cb3 getPathTo\cf4 \cb3 ());\
                    (*node)->\cf16 \cb3 addToPath\cf4 \cb3 (*node);\
                    (*node)->\cf16 \cb3 setDist\cf4 \cb3 (distToPrevious + edgeWeight);\
                \}\
            \}\
        \}\
        open.\cf15 \cb3 sort\cf4 \cb3 (\cf16 \cb3 compareDist\cf4 \cb3 );\
        temp = previous;\
        previous = *open.\cf15 \cb3 begin\cf4 \cb3 ();\
        open.\cf15 \cb3 erase\cf4 \cb3 (open.\cf15 \cb3 begin\cf4 \cb3 ());\
        closed.\cf15 \cb3 push_back\cf4 \cb3 (previous);\
        adj.\cf15 \cb3 clear\cf4 \cb3 ();\
        distToPrevious = previous->\cf16 \cb3 getDist\cf4 \cb3 ();\
    \}\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i = \cf13 \cb3 0\cf4 \cb3 ; i < \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 size\cf4 \cb3 (); i++)\{\
        \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 at\cf4 \cb3 (i)->\cf16 \cb3 setDist\cf4 \cb3 (-\cf13 \cb3 1\cf4 \cb3 );\
    \}\
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> out = b->\cf16 \cb3 getPathTo\cf4 \cb3 ();\
    out.\cf15 \cb3 push_front\cf4 \cb3 (a);\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  out;\
\}\

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 avgPath\cf4 \cb3 (\cf14 \cb3 Graph\cf4 \cb3 * g)\{\
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> nodes = g->\cf16 \cb3 getNodes\cf4 \cb3 ();\
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> path;\
    
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  pathSize = \cf13 \cb3 0\cf4 \cb3 ;\
    
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i;\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (i = \cf13 \cb3 1\cf4 \cb3 ; i < g->\cf16 \cb3 getSize\cf4 \cb3 () - \cf13 \cb3 1\cf4 \cb3 ; i++)\{\
        path = g->\cf16 \cb3 dijkstra\cf4 \cb3 (nodes.\cf15 \cb3 at\cf4 \cb3 (\cf13 \cb3 0\cf4 \cb3 ), nodes.\cf15 \cb3 at\cf4 \cb3 (i));\
        \cf17 \cb3 cout\cf4 \cb3  << path.\cf15 \cb3 size\cf4 \cb3 () - \cf13 \cb3 1\cf4 \cb3 << \cf6 \cb3 " + "\cf4 \cb3 ;\
        pathSize += path.\cf15 \cb3 size\cf4 \cb3 () - \cf13 \cb3 1\cf4 \cb3 ;\
        path.\cf15 \cb3 clear\cf4 \cb3 ();\
    \}\
    path = g->\cf16 \cb3 dijkstra\cf4 \cb3 (nodes.\cf15 \cb3 at\cf4 \cb3 (\cf13 \cb3 0\cf4 \cb3 ), nodes.\cf15 \cb3 at\cf4 \cb3 (i));\
    pathSize += path.\cf15 \cb3 size\cf4 \cb3 () - \cf13 \cb3 1\cf4 \cb3 ;\
    \cf17 \cb3 cout\cf4 \cb3  << path.\cf15 \cb3 size\cf4 \cb3 () - \cf13 \cb3 1\cf4 \cb3  << \cf6 \cb3 " / "\cf4 \cb3  << i << \cf6 \cb3 " = "\cf4 \cb3 ;\
    pathSize = pathSize / i;\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  pathSize;\
\}\
\cf2 \cb3 //--------------------------------------------------------------------------------------------------------------\cf4 \cb3 \
\

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 edgeExists\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b)\{\
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> adj = \cf16 \cb3 listToVec\cf4 \cb3 (a->\cf16 \cb3 getAdjacent\cf4 \cb3 ());\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  (\cf15 \cb3 find\cf4 \cb3 (adj.\cf15 \cb3 begin\cf4 \cb3 (), adj.\cf15 \cb3 end\cf4 \cb3 (), b) != adj.\cf15 \cb3 end\cf4 \cb3 ());\
\}\

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 prob\cf4 \cb3 ()\{\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  (\cf15 \cb3 rand\cf4 \cb3 () % \cf13 \cb3 100\cf4 \cb3 ) / \cf13 \cb3 100.0\cf4 \cb3 ;\
\}\

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf9 \cb3 randWeight\cf4 \cb3 ()\{\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  ((\cf15 \cb3 rand\cf4 \cb3 () % \cf13 \cb3 91\cf4 \cb3 ) + \cf13 \cb3 10\cf4 \cb3 ) / \cf13 \cb3 10.0\cf4 \cb3 ;\
\}\

\f1\b \cf7 \cb3 template
\f0\b0 \cf4 \cb3  <
\f1\b \cf7 \cb3 class
\f0\b0 \cf4 \cb3  T>\

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 vecContains\cf4 \cb3 (\cf10 \cb3 vector\cf4 \cb3 <T> vec, T elem)\{\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3 (find(vec.begin(), vec.end(), elem) != vec.end());\
\}\

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 listContains\cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> lst, \cf14 \cb3 Node\cf4 \cb3 * elem)\{\
    
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (lst.\cf15 \cb3 size\cf4 \cb3 () == \cf13 \cb3 0\cf4 \cb3 )\{
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 false
\f0\b0 \cf4 \cb3 ;\}\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *>::\cf8 \cb3 iterator\cf4 \cb3  it = lst.\cf15 \cb3 begin\cf4 \cb3 (); it != lst.\cf15 \cb3 end\cf4 \cb3 (); it++)\{\
        
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (elem == *it)\{\
            
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 true
\f0\b0 \cf4 \cb3 ;\
        \}\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 false
\f0\b0 \cf4 \cb3 ;\
\}\

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf9 \cb3 compareDist\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b)\{\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3 (a->\cf16 \cb3 getDist\cf4 \cb3 () < b->\cf16 \cb3 getDist\cf4 \cb3 ());\
\}\
\cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> \cf9 \cb3 listToVec\cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> lst)\{\
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> vec;\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *>::\cf8 \cb3 iterator\cf4 \cb3  it = lst.\cf15 \cb3 begin\cf4 \cb3 (); it != lst.\cf15 \cb3 end\cf4 \cb3 (); it++)\{\
        vec.\cf15 \cb3 push_back\cf4 \cb3 (*it);\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  vec;\
\}\

\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  \cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 getEdgeWeight\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b)\{\
    \cf14 \cb3 Edge\cf4 \cb3 * edge = \cf16 \cb3 getEdgePointer\cf4 \cb3 (a, b);\
    
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (edge != 
\f1\b \cf7 \cb3 nullptr
\f0\b0 \cf4 \cb3 )\{\
        
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  edge->\cf16 \cb3 getWeight\cf4 \cb3 ();\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 NULL
\f0\b0 \cf4 \cb3 ;\
\}\

\f1\b \cf7 \cb3 bool
\f0\b0 \cf4 \cb3  \cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 nodesConnected\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b)\{\
    \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> open = a -> \cf16 \cb3 getAdjacent\cf4 \cb3 (), closed, adj;\
    \cf14 \cb3 Node\cf4 \cb3 * current;\
    closed.\cf15 \cb3 push_back\cf4 \cb3 (a);\
    
\f1\b \cf7 \cb3 while
\f0\b0 \cf4 \cb3 (open.\cf15 \cb3 size\cf4 \cb3 ()!= \cf13 \cb3 0\cf4 \cb3 )\{\
        current = *open.\cf15 \cb3 begin\cf4 \cb3 ();\
        adj = current->\cf16 \cb3 getAdjacent\cf4 \cb3 ();\
        open.\cf15 \cb3 erase\cf4 \cb3 (open.\cf15 \cb3 begin\cf4 \cb3 ());\
        closed.\cf15 \cb3 push_back\cf4 \cb3 (current);\
        
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *>::\cf8 \cb3 iterator\cf4 \cb3  it = adj.\cf15 \cb3 begin\cf4 \cb3 (); it != adj.\cf15 \cb3 end\cf4 \cb3 (); it++)\{\
            
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (!(\cf16 \cb3 listContains\cf4 \cb3 (open, *it) || \cf16 \cb3 listContains\cf4 \cb3 (closed, *it)))\
                open.\cf15 \cb3 push_back\cf4 \cb3 (*it);\
        \}\
        
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (\cf16 \cb3 listContains\cf4 \cb3 (closed, b))\
            
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 true
\f0\b0 \cf4 \cb3 ;\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 false
\f0\b0 \cf4 \cb3 ;\
\}\
\cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 Graph\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  n)\{\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  index = \cf13 \cb3 0\cf4 \cb3 ; index < n; index++)\{\
        \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 push_back\cf4 \cb3 (
\f1\b \cf7 \cb3 nullptr
\f0\b0 \cf4 \cb3 );\
        \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 at\cf4 \cb3 (index) = 
\f1\b \cf7 \cb3 new
\f0\b0 \cf4 \cb3  \cf14 \cb3 Node\cf4 \cb3 (index);\
    \}\
\}\

\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 addEdge\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3  *a, \cf14 \cb3 Node\cf4 \cb3  *b, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  wt) \{\
    \cf14 \cb3 Edge\cf4 \cb3 * edg;\
    edg = 
\f1\b \cf7 \cb3 new
\f0\b0 \cf4 \cb3  \cf14 \cb3 Edge\cf4 \cb3 (a, b, wt);\
    \cf12 \cb3 edges\cf4 \cb3 .\cf15 \cb3 push_back\cf4 \cb3 (edg);\
\}\

\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 addEdge\cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  a, 
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  b, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  wt) \{\
    \cf14 \cb3 Edge\cf4 \cb3 * edg;\
    edg = 
\f1\b \cf7 \cb3 new
\f0\b0 \cf4 \cb3  \cf14 \cb3 Edge\cf4 \cb3 (\cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 at\cf4 \cb3 (a), \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 at\cf4 \cb3 (b), wt);\
    \cf12 \cb3 edges\cf4 \cb3 .\cf15 \cb3 push_back\cf4 \cb3 (edg);\
\}\
\cf14 \cb3 Graph\cf4 \cb3 ::~\cf9 \cb3 Graph\cf4 \cb3 ()\{\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i = \cf13 \cb3 0\cf4 \cb3 ; i < \cf12 \cb3 edges\cf4 \cb3 .\cf15 \cb3 size\cf4 \cb3 (); i++)\{\
        
\f1\b \cf7 \cb3 delete
\f0\b0 \cf4 \cb3  \cf12 \cb3 edges\cf4 \cb3 .\cf15 \cb3 at\cf4 \cb3 (i);\
    \}\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i = \cf13 \cb3 0\cf4 \cb3 ; i < \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 size\cf4 \cb3 (); i++)\{\
        
\f1\b \cf7 \cb3 delete
\f0\b0 \cf4 \cb3  \cf12 \cb3 nodes\cf4 \cb3 .\cf15 \cb3 at\cf4 \cb3 (i);\
    \}\
\}\
\
\cf8 \cb3 ostream\cf4 \cb3 & 
\f1\b \cf7 \cb3 operator
\f0\b0 \cf4 \cb3 << (\cf8 \cb3 ostream\cf4 \cb3 & out, \cf14 \cb3 Node\cf4 \cb3 * n)\{\
    out << n->\cf16 \cb3 getIndex\cf4 \cb3 ();\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  out;\
\}\
\cf8 \cb3 ostream\cf4 \cb3 & 
\f1\b \cf7 \cb3 operator
\f0\b0 \cf4 \cb3 << (\cf8 \cb3 ostream\cf4 \cb3 & out, \cf14 \cb3 Graph\cf4 \cb3 * g)\{\
    \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> nodes = g->\cf16 \cb3 getNodes\cf4 \cb3 (), adj;\
    \cf14 \cb3 Node\cf4 \cb3 * current; \cf2 \cb3 //the current node in focus\cf4 \cb3 \
    \cf14 \cb3 Edge\cf4 \cb3 * edge;       \cf2 \cb3 //pointer to edge to be printed\cf4 \cb3 \
    out << \cf15 \cb3 endl\cf4 \cb3 ;\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  i = \cf13 \cb3 0\cf4 \cb3 ; i < g->\cf16 \cb3 getSize\cf4 \cb3 (); i++)\{\
        current = nodes.\cf15 \cb3 at\cf4 \cb3 (i);\
        adj = \cf16 \cb3 listToVec\cf4 \cb3 (current->\cf16 \cb3 getAdjacent\cf4 \cb3 ());\
        out << \cf6 \cb3 "Node "\cf4 \cb3  << current << \cf6 \cb3 ":"\cf4 \cb3  << \cf15 \cb3 endl\cf4 \cb3 ;\
        \cf10 \cb3 vector\cf4 \cb3 <\cf14 \cb3 Edge\cf4 \cb3 *> used; \cf2 \cb3 //stores edge values which have already been printed\cf4 \cb3 \
        
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 int
\f0\b0 \cf4 \cb3  j = \cf13 \cb3 0\cf4 \cb3 ; j < adj.\cf15 \cb3 size\cf4 \cb3 (); j++)\{\
            edge = g->\cf16 \cb3 getEdgePointer\cf4 \cb3 (nodes.\cf15 \cb3 at\cf4 \cb3 (i), adj.\cf15 \cb3 at\cf4 \cb3 (j));\
            
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (edge != 
\f1\b \cf7 \cb3 nullptr
\f0\b0 \cf4 \cb3  && \cf15 \cb3 find\cf4 \cb3 (used.\cf15 \cb3 begin\cf4 \cb3 (), used.\cf15 \cb3 end\cf4 \cb3 (), edge) == used.\cf15 \cb3 end\cf4 \cb3 ())\
                    out << \cf6 \cb3 "\\t"\cf4 \cb3  << current << \cf6 \cb3 " ---> "\cf4 \cb3  << adj.\cf15 \cb3 at\cf4 \cb3 (j) << \cf6 \cb3 " ("\cf4 \cb3  << edge->\cf16 \cb3 getWeight\cf4 \cb3 () << \cf6 \cb3 ")"\cf4 \cb3  << \cf15 \cb3 endl\cf4 \cb3 ;\
            used.\cf15 \cb3 push_back\cf4 \cb3 (edge);\
        \}\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  out;\
\}\
\cf8 \cb3 ostream\cf4 \cb3 & 
\f1\b \cf7 \cb3 operator
\f0\b0 \cf4 \cb3 <<(\cf8 \cb3 ostream\cf4 \cb3 & out, \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> nodes)\{\
    
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 (nodes.\cf15 \cb3 size\cf4 \cb3 () != \cf13 \cb3 0\cf4 \cb3 )\{\
        \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *>::\cf8 \cb3 iterator\cf4 \cb3  finish = nodes.\cf15 \cb3 end\cf4 \cb3 ();\
        finish--;\
        \cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *>::\cf8 \cb3 iterator\cf4 \cb3  it;\
        
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (it = nodes.\cf15 \cb3 begin\cf4 \cb3 (); it != finish; it++)\{\
            out << (*it)->\cf16 \cb3 getIndex\cf4 \cb3 () << \cf6 \cb3 " --> "\cf4 \cb3  ;\
        \}\
        out << (*it)->\cf16 \cb3 getIndex\cf4 \cb3 ();\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  out;\
\}\
\cf14 \cb3 Edge\cf4 \cb3 * \cf14 \cb3 Graph\cf4 \cb3 ::\cf9 \cb3 getEdgePointer\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b)\{\
    
\f1\b \cf7 \cb3 for
\f0\b0 \cf4 \cb3 (
\f1\b \cf7 \cb3 auto
\f0\b0 \cf4 \cb3  & edge : \cf12 \cb3 edges\cf4 \cb3 )\{\
        
\f1\b \cf7 \cb3 if
\f0\b0 \cf4 \cb3 ((edge->\cf16 \cb3 getNode1\cf4 \cb3 () == a && edge->\cf16 \cb3 getNode2\cf4 \cb3 () == b)||(edge->\cf16 \cb3 getNode2\cf4 \cb3 () == a && edge->\cf16 \cb3 getNode1\cf4 \cb3 () == b))\{\
            
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  edge;\
        \}\
    \}\
    
\f1\b \cf7 \cb3 return
\f0\b0 \cf4 \cb3  
\f1\b \cf7 \cb3 nullptr
\f0\b0 \cf4 \cb3 ;\
\}\
\cf14 \cb3 Edge\cf4 \cb3 ::\cf9 \cb3 Edge\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * a, \cf14 \cb3 Node\cf4 \cb3 * b, 
\f1\b \cf7 \cb3 double
\f0\b0 \cf4 \cb3  w) : \cf12 \cb3 node1\cf4 \cb3 (a), \cf12 \cb3 node2\cf4 \cb3 (b), \cf12 \cb3 wt\cf4 \cb3 (w)\{\
    a->\cf16 \cb3 addEdge\cf4 \cb3 (b); b->\cf16 \cb3 addEdge\cf4 \cb3 (a); \cf2 \cb3 //increase the number of edges a and b recognize\cf4 \cb3 \
\}\

\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf14 \cb3 Node\cf4 \cb3 ::\cf9 \cb3 setPathTo\cf4 \cb3 (\cf10 \cb3 list\cf4 \cb3 <\cf14 \cb3 Node\cf4 \cb3 *> path)\{\
    \cf12 \cb3 pathToThis\cf4 \cb3 .\cf15 \cb3 clear\cf4 \cb3 ();\
    \cf12 \cb3 pathToThis\cf4 \cb3  = path;\
\}\

\f1\b \cf7 \cb3 void
\f0\b0 \cf4 \cb3  \cf14 \cb3 Node\cf4 \cb3 ::\cf9 \cb3 addToPath\cf4 \cb3 (\cf14 \cb3 Node\cf4 \cb3 * node)\{\
    \cf12 \cb3 pathToThis\cf4 \cb3 .\cf15 \cb3 push_back\cf4 \cb3 (node);\
\}\
}